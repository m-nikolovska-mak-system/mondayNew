name: App Source Change ‚Üí Notify Teams

on:
  push:
    paths:
      - '**/src/**/com/miha/app/**'
  workflow_dispatch:

jobs:
  notify-teams:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changes
        run: |
          set -e
          echo "Detecting changed files..."
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
            echo "Initial commit detected ‚Äî listing all files in ${GITHUB_SHA}"
            CHANGED=$(git ls-tree -r --name-only "${GITHUB_SHA}")
          else
            git fetch --no-tags --prune origin +refs/heads/*:refs/remotes/origin/* || true
            CHANGED=$(git diff --name-only "${{ github.event.before }}" "${{ github.sha }}")
          fi

          if [ -z "$CHANGED" ]; then
            echo "‚ö†Ô∏è No files changed under com/miha/app ‚Äî skipping."
            echo "found=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "found=true" >> $GITHUB_OUTPUT
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Microsoft Teams notification
        if: steps.changes.outputs.found == 'true'
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_INSTALLER_URL }}
        run: |
          set -e

          if [ -z "$TEAMS_WEBHOOK_URL" ]; then
            echo "‚ùå Missing TEAMS_WEBHOOK_INSTALLER_URL secret."
            exit 1
          fi

          FILES="${{ steps.changes.outputs.files }}"
          ACTOR="${{ github.actor }}"
          REPO="${{ github.repository }}"
          SHA="${{ github.sha }}"
          SHORT_SHA="${SHA:0:7}"
          DISPLAY_ACTOR="${ACTOR:-Unknown user}"
          TIMESTAMP=$(TZ='Europe/Belgrade' date +"%Y-%m-%d %H:%M %Z")

          # Escape dangerous JSON characters
          SAFE_FILES=$(echo "$FILES" | sed 's/"/\\"/g')

          # Create Adaptive Card payload (JSON-safe heredoc)
          PAYLOAD=$(cat <<EOF
          {
            "type": "message",
            "attachments": [
              {
                "contentType": "application/vnd.microsoft.card.adaptive",
                "content": {
                  "\$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                  "type": "AdaptiveCard",
                  "version": "1.4",
                  "body": [
                    {
                      "type": "ColumnSet",
                      "columns": [
                        {
                          "type": "Column",
                          "width": "auto",
                          "items": [
                            {
                              "type": "Image",
                              "url": "https://github.com/${ACTOR}.png",
                              "size": "Small",
                              "style": "Person"
                            }
                          ]
                        },
                        {
                          "type": "Column",
                          "width": "stretch",
                          "items": [
                            {
                              "type": "TextBlock",
                              "text": "üöÄ App Source Files Updated",
                              "weight": "Bolder",
                              "size": "Large",
                              "color": "Accent"
                            },
                            {
                              "type": "TextBlock",
                              "text": "${DISPLAY_ACTOR} pushed to ${REPO}",
                              "isSubtle": true,
                              "wrap": true
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Container",
                      "style": "attention",
                      "items": [
                        {
                          "type": "TextBlock",
                          "text": "‚ö†Ô∏è **Reminder:** Prepare new installer for Template Designer",
                          "wrap": true,
                          "weight": "Bolder"
                        }
                      ]
                    },
                    {
                      "type": "TextBlock",
                      "text": "üîó **Commit:** [${SHORT_SHA}](https://github.com/${REPO}/commit/${SHA})",
                      "wrap": true
                    },
                    {
                      "type": "TextBlock",
                      "text": "üïí **Timestamp:** ${TIMESTAMP}",
                      "wrap": true
                    },
                    {
                      "type": "TextBlock",
                      "text": "üìÇ **Files Changed:**",
                      "weight": "Bolder"
                    },
                    {
                      "type": "TextBlock",
                      "text": "${SAFE_FILES}",
                      "fontType": "Monospace",
                      "wrap": true
                    }
                  ],
                  "actions": [
                    {
                      "type": "Action.OpenUrl",
                      "title": "View Commit",
                      "url": "https://github.com/${REPO}/commit/${SHA}"
                    }
                  ]
                }
              }
            ]
          }
          EOF
          )

          echo "Sending message to Teams..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" "$TEAMS_WEBHOOK_URL")

          if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "202" ]; then
            echo "‚úÖ Teams notification sent successfully!"
          else
            echo "‚ùå Teams webhook failed (HTTP $HTTP_CODE)"
            echo "Payload was:"
            echo "$PAYLOAD"
            exit 1
          fi
